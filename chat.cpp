// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `chat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <chat.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __Chat__ChatServer__LogIn_name = "LogIn";

const ::std::string __Chat__ChatServer__getUserByName_name = "getUserByName";

const ::std::string __Chat__ChatServer__GroupList_name = "GroupList";

const ::std::string __Chat__ChatServer__getGroupServerByName_name = "getGroupServerByName";

const ::std::string __Chat__ChatServer__CreateGroup_name = "CreateGroup";

const ::std::string __Chat__ChatServer__DeleteGroup_name = "DeleteGroup";

const ::std::string __Chat__ChatServer__registerServer_name = "registerServer";

const ::std::string __Chat__ChatServer__unregisterServer_name = "unregisterServer";

const ::std::string __Chat__GroupServer__join_name = "join";

const ::std::string __Chat__GroupServer__Leave_name = "Leave";

const ::std::string __Chat__GroupServer__SendMessage_name = "SendMessage";

const ::std::string __Chat__GroupServer__UserList_name = "UserList";

const ::std::string __Chat__GroupServer__Name_name = "Name";

const ::std::string __Chat__GroupServerManager__CreateGroup_name = "CreateGroup";

const ::std::string __Chat__GroupServerManager__ListGroups_name = "ListGroups";

const ::std::string __Chat__GroupServerManager__DeleteGroup_name = "DeleteGroup";

const ::std::string __Chat__GroupServerManager__getGroupServerByName_name = "getGroupServerByName";

const ::std::string __Chat__User__getName_name = "getName";

const ::std::string __Chat__User__receiveText_name = "receiveText";

const ::std::string __Chat__User__receivePrivateText_name = "receivePrivateText";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::NameDoesNotExist> __Chat__NameDoesNotExist_init("::Chat::NameDoesNotExist");

}

Chat::NameDoesNotExist::~NameDoesNotExist() throw()
{
}

::std::string
Chat::NameDoesNotExist::ice_name() const
{
    return "Chat::NameDoesNotExist";
}

Chat::NameDoesNotExist*
Chat::NameDoesNotExist::ice_clone() const
{
    return new NameDoesNotExist(*this);
}

void
Chat::NameDoesNotExist::ice_throw() const
{
    throw *this;
}

void
Chat::NameDoesNotExist::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Chat::NameDoesNotExist", -1, true);
    __os->endWriteSlice();
}

void
Chat::NameDoesNotExist::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::NameAlreadyExists> __Chat__NameAlreadyExists_init("::Chat::NameAlreadyExists");

}

Chat::NameAlreadyExists::~NameAlreadyExists() throw()
{
}

::std::string
Chat::NameAlreadyExists::ice_name() const
{
    return "Chat::NameAlreadyExists";
}

Chat::NameAlreadyExists*
Chat::NameAlreadyExists::ice_clone() const
{
    return new NameAlreadyExists(*this);
}

void
Chat::NameAlreadyExists::ice_throw() const
{
    throw *this;
}

void
Chat::NameAlreadyExists::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Chat::NameAlreadyExists", -1, true);
    __os->endWriteSlice();
}

void
Chat::NameAlreadyExists::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::ServerAlreadyRegistered> __Chat__ServerAlreadyRegistered_init("::Chat::ServerAlreadyRegistered");

}

Chat::ServerAlreadyRegistered::~ServerAlreadyRegistered() throw()
{
}

::std::string
Chat::ServerAlreadyRegistered::ice_name() const
{
    return "Chat::ServerAlreadyRegistered";
}

Chat::ServerAlreadyRegistered*
Chat::ServerAlreadyRegistered::ice_clone() const
{
    return new ServerAlreadyRegistered(*this);
}

void
Chat::ServerAlreadyRegistered::ice_throw() const
{
    throw *this;
}

void
Chat::ServerAlreadyRegistered::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Chat::ServerAlreadyRegistered", -1, true);
    __os->endWriteSlice();
}

void
Chat::ServerAlreadyRegistered::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::ServerDoesNotExist> __Chat__ServerDoesNotExist_init("::Chat::ServerDoesNotExist");

}

Chat::ServerDoesNotExist::~ServerDoesNotExist() throw()
{
}

::std::string
Chat::ServerDoesNotExist::ice_name() const
{
    return "Chat::ServerDoesNotExist";
}

Chat::ServerDoesNotExist*
Chat::ServerDoesNotExist::ice_clone() const
{
    return new ServerDoesNotExist(*this);
}

void
Chat::ServerDoesNotExist::ice_throw() const
{
    throw *this;
}

void
Chat::ServerDoesNotExist::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Chat::ServerDoesNotExist", -1, true);
    __os->endWriteSlice();
}

void
Chat::ServerDoesNotExist::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::UserAlreadyRegistered> __Chat__UserAlreadyRegistered_init("::Chat::UserAlreadyRegistered");

}

Chat::UserAlreadyRegistered::~UserAlreadyRegistered() throw()
{
}

::std::string
Chat::UserAlreadyRegistered::ice_name() const
{
    return "Chat::UserAlreadyRegistered";
}

Chat::UserAlreadyRegistered*
Chat::UserAlreadyRegistered::ice_clone() const
{
    return new UserAlreadyRegistered(*this);
}

void
Chat::UserAlreadyRegistered::ice_throw() const
{
    throw *this;
}

void
Chat::UserAlreadyRegistered::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Chat::UserAlreadyRegistered", -1, true);
    __os->endWriteSlice();
}

void
Chat::UserAlreadyRegistered::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::UserDoesNotExist> __Chat__UserDoesNotExist_init("::Chat::UserDoesNotExist");

}

Chat::UserDoesNotExist::~UserDoesNotExist() throw()
{
}

::std::string
Chat::UserDoesNotExist::ice_name() const
{
    return "Chat::UserDoesNotExist";
}

Chat::UserDoesNotExist*
Chat::UserDoesNotExist::ice_clone() const
{
    return new UserDoesNotExist(*this);
}

void
Chat::UserDoesNotExist::ice_throw() const
{
    throw *this;
}

void
Chat::UserDoesNotExist::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Chat::UserDoesNotExist", -1, true);
    __os->endWriteSlice();
}

void
Chat::UserDoesNotExist::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(::IceProxy::Chat::ChatServer* p) { return p; }

void
::IceProxy::Chat::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Chat::ChatServer>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Chat::ChatServer;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Chat::ChatServer::LogIn(const ::Chat::UserPrx& __p_callback, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__ChatServer__LogIn_name);
    ::IceInternal::Outgoing __og(this, __Chat__ChatServer__LogIn_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_callback);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Chat::NameAlreadyExists&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::begin_LogIn(const ::Chat::UserPrx& __p_callback, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__ChatServer__LogIn_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__ChatServer__LogIn_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__ChatServer__LogIn_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_callback);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::__begin_LogIn(const ::Chat::UserPrx& __p_callback, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::ChatServerPrx __proxy = ::Chat::ChatServerPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_LogIn(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_LogIn(__p_callback, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::Chat::ChatServer::end_LogIn(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__ChatServer__LogIn_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Chat::NameAlreadyExists&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

::Chat::UserPrx
IceProxy::Chat::ChatServer::getUserByName(const ::std::string& __p_name, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__ChatServer__getUserByName_name);
    ::IceInternal::Outgoing __og(this, __Chat__ChatServer__getUserByName_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Chat::UserPrx __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::begin_getUserByName(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__ChatServer__getUserByName_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__ChatServer__getUserByName_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__ChatServer__getUserByName_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::__begin_getUserByName(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Chat::UserPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::Chat::UserPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::ChatServerPrx __proxy = ::Chat::ChatServerPrx::uncheckedCast(__result->getProxy());
            ::Chat::UserPrx __ret;
            try
            {
                __ret = __proxy->end_getUserByName(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::Chat::UserPrx&)> _response;
    };
    return begin_getUserByName(__p_name, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Chat::UserPrx
IceProxy::Chat::ChatServer::end_getUserByName(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__ChatServer__getUserByName_name);
    ::Chat::UserPrx __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Chat::Groups
IceProxy::Chat::ChatServer::GroupList(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__ChatServer__GroupList_name);
    ::IceInternal::Outgoing __og(this, __Chat__ChatServer__GroupList_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Chat::Groups __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::begin_GroupList(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__ChatServer__GroupList_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__ChatServer__GroupList_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__ChatServer__GroupList_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::__begin_GroupList(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Chat::Groups&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::Chat::Groups&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::ChatServerPrx __proxy = ::Chat::ChatServerPrx::uncheckedCast(__result->getProxy());
            ::Chat::Groups __ret;
            try
            {
                __ret = __proxy->end_GroupList(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::Chat::Groups&)> _response;
    };
    return begin_GroupList(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Chat::Groups
IceProxy::Chat::ChatServer::end_GroupList(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__ChatServer__GroupList_name);
    ::Chat::Groups __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Chat::GroupServerPrx
IceProxy::Chat::ChatServer::getGroupServerByName(const ::std::string& __p_name, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__ChatServer__getGroupServerByName_name);
    ::IceInternal::Outgoing __og(this, __Chat__ChatServer__getGroupServerByName_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Chat::NameDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Chat::GroupServerPrx __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::begin_getGroupServerByName(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__ChatServer__getGroupServerByName_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__ChatServer__getGroupServerByName_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__ChatServer__getGroupServerByName_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::__begin_getGroupServerByName(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Chat::GroupServerPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::Chat::GroupServerPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::ChatServerPrx __proxy = ::Chat::ChatServerPrx::uncheckedCast(__result->getProxy());
            ::Chat::GroupServerPrx __ret;
            try
            {
                __ret = __proxy->end_getGroupServerByName(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::Chat::GroupServerPrx&)> _response;
    };
    return begin_getGroupServerByName(__p_name, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Chat::GroupServerPrx
IceProxy::Chat::ChatServer::end_getGroupServerByName(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__ChatServer__getGroupServerByName_name);
    ::Chat::GroupServerPrx __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Chat::NameDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::Chat::ChatServer::CreateGroup(const ::std::string& __p_name, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__ChatServer__CreateGroup_name);
    ::IceInternal::Outgoing __og(this, __Chat__ChatServer__CreateGroup_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Chat::NameAlreadyExists&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::begin_CreateGroup(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__ChatServer__CreateGroup_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__ChatServer__CreateGroup_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__ChatServer__CreateGroup_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::__begin_CreateGroup(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::ChatServerPrx __proxy = ::Chat::ChatServerPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_CreateGroup(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_CreateGroup(__p_name, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::Chat::ChatServer::end_CreateGroup(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__ChatServer__CreateGroup_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Chat::NameAlreadyExists&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::Chat::ChatServer::DeleteGroup(const ::std::string& __p_name, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__ChatServer__DeleteGroup_name);
    ::IceInternal::Outgoing __og(this, __Chat__ChatServer__DeleteGroup_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Chat::NameDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::begin_DeleteGroup(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__ChatServer__DeleteGroup_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__ChatServer__DeleteGroup_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__ChatServer__DeleteGroup_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::__begin_DeleteGroup(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::ChatServerPrx __proxy = ::Chat::ChatServerPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_DeleteGroup(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_DeleteGroup(__p_name, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::Chat::ChatServer::end_DeleteGroup(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__ChatServer__DeleteGroup_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Chat::NameDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::Chat::ChatServer::registerServer(const ::Chat::GroupServerManagerPrx& __p_serverManager, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__ChatServer__registerServer_name);
    ::IceInternal::Outgoing __og(this, __Chat__ChatServer__registerServer_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_serverManager);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Chat::ServerAlreadyRegistered&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::begin_registerServer(const ::Chat::GroupServerManagerPrx& __p_serverManager, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__ChatServer__registerServer_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__ChatServer__registerServer_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__ChatServer__registerServer_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_serverManager);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::__begin_registerServer(const ::Chat::GroupServerManagerPrx& __p_serverManager, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::ChatServerPrx __proxy = ::Chat::ChatServerPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_registerServer(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_registerServer(__p_serverManager, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::Chat::ChatServer::end_registerServer(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__ChatServer__registerServer_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Chat::ServerAlreadyRegistered&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::Chat::ChatServer::unregisterServer(const ::Chat::GroupServerManagerPrx& __p_serverManager, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__ChatServer__unregisterServer_name);
    ::IceInternal::Outgoing __og(this, __Chat__ChatServer__unregisterServer_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_serverManager);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Chat::ServerDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::begin_unregisterServer(const ::Chat::GroupServerManagerPrx& __p_serverManager, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__ChatServer__unregisterServer_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__ChatServer__unregisterServer_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__ChatServer__unregisterServer_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_serverManager);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::ChatServer::__begin_unregisterServer(const ::Chat::GroupServerManagerPrx& __p_serverManager, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::ChatServerPrx __proxy = ::Chat::ChatServerPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_unregisterServer(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_unregisterServer(__p_serverManager, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::Chat::ChatServer::end_unregisterServer(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__ChatServer__unregisterServer_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Chat::ServerDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

const ::std::string&
IceProxy::Chat::ChatServer::ice_staticId()
{
    return ::Chat::ChatServer::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Chat::ChatServer::__newInstance() const
{
    return new ChatServer;
}
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(::IceProxy::Chat::GroupServer* p) { return p; }

void
::IceProxy::Chat::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Chat::GroupServer>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Chat::GroupServer;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Chat::GroupServer::join(const ::Chat::UserPrx& __p_who, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__GroupServer__join_name);
    ::IceInternal::Outgoing __og(this, __Chat__GroupServer__join_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_who);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Chat::UserAlreadyRegistered&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServer::begin_join(const ::Chat::UserPrx& __p_who, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__GroupServer__join_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__GroupServer__join_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__GroupServer__join_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_who);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServer::__begin_join(const ::Chat::UserPrx& __p_who, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::GroupServerPrx __proxy = ::Chat::GroupServerPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_join(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_join(__p_who, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::Chat::GroupServer::end_join(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__GroupServer__join_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Chat::UserAlreadyRegistered&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::Chat::GroupServer::Leave(const ::Chat::UserPrx& __p_who, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__GroupServer__Leave_name);
    ::IceInternal::Outgoing __og(this, __Chat__GroupServer__Leave_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_who);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Chat::UserDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServer::begin_Leave(const ::Chat::UserPrx& __p_who, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__GroupServer__Leave_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__GroupServer__Leave_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__GroupServer__Leave_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_who);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServer::__begin_Leave(const ::Chat::UserPrx& __p_who, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::GroupServerPrx __proxy = ::Chat::GroupServerPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_Leave(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_Leave(__p_who, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::Chat::GroupServer::end_Leave(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__GroupServer__Leave_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Chat::UserDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::Chat::GroupServer::SendMessage(const ::std::string& __p_message, const ::Chat::UserPrx& __p_sender, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__GroupServer__SendMessage_name);
    ::IceInternal::Outgoing __og(this, __Chat__GroupServer__SendMessage_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_message);
        __os->write(__p_sender);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Chat::UserDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServer::begin_SendMessage(const ::std::string& __p_message, const ::Chat::UserPrx& __p_sender, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__GroupServer__SendMessage_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__GroupServer__SendMessage_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__GroupServer__SendMessage_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_message);
        __os->write(__p_sender);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServer::__begin_SendMessage(const ::std::string& __p_message, const ::Chat::UserPrx& __p_sender, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::GroupServerPrx __proxy = ::Chat::GroupServerPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_SendMessage(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_SendMessage(__p_message, __p_sender, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::Chat::GroupServer::end_SendMessage(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__GroupServer__SendMessage_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Chat::UserDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

::Chat::Users
IceProxy::Chat::GroupServer::UserList(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__GroupServer__UserList_name);
    ::IceInternal::Outgoing __og(this, __Chat__GroupServer__UserList_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Chat::Users __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServer::begin_UserList(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__GroupServer__UserList_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__GroupServer__UserList_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__GroupServer__UserList_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServer::__begin_UserList(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Chat::Users&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::Chat::Users&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::GroupServerPrx __proxy = ::Chat::GroupServerPrx::uncheckedCast(__result->getProxy());
            ::Chat::Users __ret;
            try
            {
                __ret = __proxy->end_UserList(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::Chat::Users&)> _response;
    };
    return begin_UserList(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Chat::Users
IceProxy::Chat::GroupServer::end_UserList(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__GroupServer__UserList_name);
    ::Chat::Users __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::std::string
IceProxy::Chat::GroupServer::Name(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__GroupServer__Name_name);
    ::IceInternal::Outgoing __og(this, __Chat__GroupServer__Name_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::std::string __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServer::begin_Name(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__GroupServer__Name_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__GroupServer__Name_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__GroupServer__Name_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServer::__begin_Name(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::GroupServerPrx __proxy = ::Chat::GroupServerPrx::uncheckedCast(__result->getProxy());
            ::std::string __ret;
            try
            {
                __ret = __proxy->end_Name(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::std::string&)> _response;
    };
    return begin_Name(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::std::string
IceProxy::Chat::GroupServer::end_Name(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__GroupServer__Name_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::Chat::GroupServer::ice_staticId()
{
    return ::Chat::GroupServer::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Chat::GroupServer::__newInstance() const
{
    return new GroupServer;
}
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(::IceProxy::Chat::GroupServerManager* p) { return p; }

void
::IceProxy::Chat::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Chat::GroupServerManager>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Chat::GroupServerManager;
        v->__copyFrom(proxy);
    }
}

::Chat::GroupServerPrx
IceProxy::Chat::GroupServerManager::CreateGroup(const ::std::string& __p_name, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__GroupServerManager__CreateGroup_name);
    ::IceInternal::Outgoing __og(this, __Chat__GroupServerManager__CreateGroup_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Chat::NameAlreadyExists&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Chat::GroupServerPrx __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServerManager::begin_CreateGroup(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__GroupServerManager__CreateGroup_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__GroupServerManager__CreateGroup_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__GroupServerManager__CreateGroup_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServerManager::__begin_CreateGroup(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Chat::GroupServerPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::Chat::GroupServerPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::GroupServerManagerPrx __proxy = ::Chat::GroupServerManagerPrx::uncheckedCast(__result->getProxy());
            ::Chat::GroupServerPrx __ret;
            try
            {
                __ret = __proxy->end_CreateGroup(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::Chat::GroupServerPrx&)> _response;
    };
    return begin_CreateGroup(__p_name, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Chat::GroupServerPrx
IceProxy::Chat::GroupServerManager::end_CreateGroup(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__GroupServerManager__CreateGroup_name);
    ::Chat::GroupServerPrx __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Chat::NameAlreadyExists&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Chat::Groups
IceProxy::Chat::GroupServerManager::ListGroups(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__GroupServerManager__ListGroups_name);
    ::IceInternal::Outgoing __og(this, __Chat__GroupServerManager__ListGroups_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Chat::Groups __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServerManager::begin_ListGroups(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__GroupServerManager__ListGroups_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__GroupServerManager__ListGroups_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__GroupServerManager__ListGroups_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServerManager::__begin_ListGroups(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Chat::Groups&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::Chat::Groups&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::GroupServerManagerPrx __proxy = ::Chat::GroupServerManagerPrx::uncheckedCast(__result->getProxy());
            ::Chat::Groups __ret;
            try
            {
                __ret = __proxy->end_ListGroups(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::Chat::Groups&)> _response;
    };
    return begin_ListGroups(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Chat::Groups
IceProxy::Chat::GroupServerManager::end_ListGroups(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__GroupServerManager__ListGroups_name);
    ::Chat::Groups __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::Chat::GroupServerManager::DeleteGroup(const ::std::string& __p_name, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__GroupServerManager__DeleteGroup_name);
    ::IceInternal::Outgoing __og(this, __Chat__GroupServerManager__DeleteGroup_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Chat::NameDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServerManager::begin_DeleteGroup(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__GroupServerManager__DeleteGroup_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__GroupServerManager__DeleteGroup_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__GroupServerManager__DeleteGroup_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServerManager::__begin_DeleteGroup(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::GroupServerManagerPrx __proxy = ::Chat::GroupServerManagerPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_DeleteGroup(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_DeleteGroup(__p_name, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::Chat::GroupServerManager::end_DeleteGroup(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__GroupServerManager__DeleteGroup_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Chat::NameDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

::Chat::GroupServerPrx
IceProxy::Chat::GroupServerManager::getGroupServerByName(const ::std::string& __p_name, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__GroupServerManager__getGroupServerByName_name);
    ::IceInternal::Outgoing __og(this, __Chat__GroupServerManager__getGroupServerByName_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Chat::GroupServerPrx __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServerManager::begin_getGroupServerByName(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__GroupServerManager__getGroupServerByName_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__GroupServerManager__getGroupServerByName_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__GroupServerManager__getGroupServerByName_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServerManager::__begin_getGroupServerByName(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Chat::GroupServerPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::Chat::GroupServerPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::GroupServerManagerPrx __proxy = ::Chat::GroupServerManagerPrx::uncheckedCast(__result->getProxy());
            ::Chat::GroupServerPrx __ret;
            try
            {
                __ret = __proxy->end_getGroupServerByName(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::Chat::GroupServerPrx&)> _response;
    };
    return begin_getGroupServerByName(__p_name, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Chat::GroupServerPrx
IceProxy::Chat::GroupServerManager::end_getGroupServerByName(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__GroupServerManager__getGroupServerByName_name);
    ::Chat::GroupServerPrx __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::Chat::GroupServerManager::ice_staticId()
{
    return ::Chat::GroupServerManager::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Chat::GroupServerManager::__newInstance() const
{
    return new GroupServerManager;
}
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(::IceProxy::Chat::User* p) { return p; }

void
::IceProxy::Chat::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Chat::User>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Chat::User;
        v->__copyFrom(proxy);
    }
}

::std::string
IceProxy::Chat::User::getName(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__User__getName_name);
    ::IceInternal::Outgoing __og(this, __Chat__User__getName_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::std::string __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::User::begin_getName(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__User__getName_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__User__getName_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__User__getName_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::User::__begin_getName(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::UserPrx __proxy = ::Chat::UserPrx::uncheckedCast(__result->getProxy());
            ::std::string __ret;
            try
            {
                __ret = __proxy->end_getName(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::std::string&)> _response;
    };
    return begin_getName(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::std::string
IceProxy::Chat::User::end_getName(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__User__getName_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::Chat::User::receiveText(const ::std::string& __p_msg, const ::Chat::UserPrx& __p_sender, const ::Chat::GroupServerPrx& __p_gServer, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Chat__User__receiveText_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_msg);
        __os->write(__p_sender);
        __os->write(__p_gServer);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Chat::User::begin_receiveText(const ::std::string& __p_msg, const ::Chat::UserPrx& __p_sender, const ::Chat::GroupServerPrx& __p_gServer, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__User__receiveText_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__User__receiveText_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_msg);
        __os->write(__p_sender);
        __os->write(__p_gServer);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Chat::User::end_receiveText(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Chat__User__receiveText_name);
}

void
IceProxy::Chat::User::receivePrivateText(const ::std::string& __p_msg, const ::Chat::UserPrx& __p_sender, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Chat__User__receivePrivateText_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_msg);
        __os->write(__p_sender);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Chat::User::begin_receivePrivateText(const ::std::string& __p_msg, const ::Chat::UserPrx& __p_sender, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__User__receivePrivateText_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__User__receivePrivateText_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_msg);
        __os->write(__p_sender);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Chat::User::end_receivePrivateText(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Chat__User__receivePrivateText_name);
}

const ::std::string&
IceProxy::Chat::User::ice_staticId()
{
    return ::Chat::User::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Chat::User::__newInstance() const
{
    return new User;
}

::Ice::Object* Chat::upCast(::Chat::ChatServer* p) { return p; }

namespace
{
const ::std::string __Chat__ChatServer_ids[2] =
{
    "::Chat::ChatServer",
    "::Ice::Object"
};

}

bool
Chat::ChatServer::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Chat__ChatServer_ids, __Chat__ChatServer_ids + 2, _s);
}

::std::vector< ::std::string>
Chat::ChatServer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Chat__ChatServer_ids[0], &__Chat__ChatServer_ids[2]);
}

const ::std::string&
Chat::ChatServer::ice_id(const ::Ice::Current&) const
{
    return __Chat__ChatServer_ids[0];
}

const ::std::string&
Chat::ChatServer::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::ChatServer";
    return typeId;
#else
    return __Chat__ChatServer_ids[0];
#endif
}

::Ice::DispatchStatus
Chat::ChatServer::___LogIn(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Chat::UserPrx __p_callback;
    __is->read(__p_callback);
    __inS.endReadParams();
    try
    {
        LogIn(__p_callback, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Chat::NameAlreadyExists& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Chat::ChatServer::___getUserByName(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    __is->read(__p_name);
    __inS.endReadParams();
    ::Chat::UserPrx __ret = getUserByName(__p_name, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Chat::ChatServer::___GroupList(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Chat::Groups __ret = GroupList(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Chat::ChatServer::___getGroupServerByName(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    __is->read(__p_name);
    __inS.endReadParams();
    try
    {
        ::Chat::GroupServerPrx __ret = getGroupServerByName(__p_name, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Chat::NameDoesNotExist& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Chat::ChatServer::___CreateGroup(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    __is->read(__p_name);
    __inS.endReadParams();
    try
    {
        CreateGroup(__p_name, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Chat::NameAlreadyExists& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Chat::ChatServer::___DeleteGroup(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    __is->read(__p_name);
    __inS.endReadParams();
    try
    {
        DeleteGroup(__p_name, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Chat::NameDoesNotExist& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Chat::ChatServer::___registerServer(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Chat::GroupServerManagerPrx __p_serverManager;
    __is->read(__p_serverManager);
    __inS.endReadParams();
    try
    {
        registerServer(__p_serverManager, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Chat::ServerAlreadyRegistered& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Chat::ChatServer::___unregisterServer(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Chat::GroupServerManagerPrx __p_serverManager;
    __is->read(__p_serverManager);
    __inS.endReadParams();
    try
    {
        unregisterServer(__p_serverManager, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Chat::ServerDoesNotExist& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __Chat__ChatServer_all[] =
{
    "CreateGroup",
    "DeleteGroup",
    "GroupList",
    "LogIn",
    "getGroupServerByName",
    "getUserByName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "registerServer",
    "unregisterServer"
};

}

::Ice::DispatchStatus
Chat::ChatServer::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Chat__ChatServer_all, __Chat__ChatServer_all + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Chat__ChatServer_all)
    {
        case 0:
        {
            return ___CreateGroup(in, current);
        }
        case 1:
        {
            return ___DeleteGroup(in, current);
        }
        case 2:
        {
            return ___GroupList(in, current);
        }
        case 3:
        {
            return ___LogIn(in, current);
        }
        case 4:
        {
            return ___getGroupServerByName(in, current);
        }
        case 5:
        {
            return ___getUserByName(in, current);
        }
        case 6:
        {
            return ___ice_id(in, current);
        }
        case 7:
        {
            return ___ice_ids(in, current);
        }
        case 8:
        {
            return ___ice_isA(in, current);
        }
        case 9:
        {
            return ___ice_ping(in, current);
        }
        case 10:
        {
            return ___registerServer(in, current);
        }
        case 11:
        {
            return ___unregisterServer(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Chat::ChatServer::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Chat::ChatServer::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Chat::__patch(ChatServerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Chat::ChatServerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Chat::ChatServer::ice_staticId(), v);
    }
}

::Ice::Object* Chat::upCast(::Chat::GroupServer* p) { return p; }

namespace
{
const ::std::string __Chat__GroupServer_ids[2] =
{
    "::Chat::GroupServer",
    "::Ice::Object"
};

}

bool
Chat::GroupServer::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Chat__GroupServer_ids, __Chat__GroupServer_ids + 2, _s);
}

::std::vector< ::std::string>
Chat::GroupServer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Chat__GroupServer_ids[0], &__Chat__GroupServer_ids[2]);
}

const ::std::string&
Chat::GroupServer::ice_id(const ::Ice::Current&) const
{
    return __Chat__GroupServer_ids[0];
}

const ::std::string&
Chat::GroupServer::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::GroupServer";
    return typeId;
#else
    return __Chat__GroupServer_ids[0];
#endif
}

::Ice::DispatchStatus
Chat::GroupServer::___join(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Chat::UserPrx __p_who;
    __is->read(__p_who);
    __inS.endReadParams();
    try
    {
        join(__p_who, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Chat::UserAlreadyRegistered& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Chat::GroupServer::___Leave(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Chat::UserPrx __p_who;
    __is->read(__p_who);
    __inS.endReadParams();
    try
    {
        Leave(__p_who, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Chat::UserDoesNotExist& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Chat::GroupServer::___SendMessage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_message;
    ::Chat::UserPrx __p_sender;
    __is->read(__p_message);
    __is->read(__p_sender);
    __inS.endReadParams();
    try
    {
        SendMessage(__p_message, __p_sender, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Chat::UserDoesNotExist& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Chat::GroupServer::___UserList(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Chat::Users __ret = UserList(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Chat::GroupServer::___Name(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::std::string __ret = Name(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Chat__GroupServer_all[] =
{
    "Leave",
    "Name",
    "SendMessage",
    "UserList",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "join"
};

}

::Ice::DispatchStatus
Chat::GroupServer::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Chat__GroupServer_all, __Chat__GroupServer_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Chat__GroupServer_all)
    {
        case 0:
        {
            return ___Leave(in, current);
        }
        case 1:
        {
            return ___Name(in, current);
        }
        case 2:
        {
            return ___SendMessage(in, current);
        }
        case 3:
        {
            return ___UserList(in, current);
        }
        case 4:
        {
            return ___ice_id(in, current);
        }
        case 5:
        {
            return ___ice_ids(in, current);
        }
        case 6:
        {
            return ___ice_isA(in, current);
        }
        case 7:
        {
            return ___ice_ping(in, current);
        }
        case 8:
        {
            return ___join(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Chat::GroupServer::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Chat::GroupServer::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Chat::__patch(GroupServerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Chat::GroupServerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Chat::GroupServer::ice_staticId(), v);
    }
}

::Ice::Object* Chat::upCast(::Chat::GroupServerManager* p) { return p; }

namespace
{
const ::std::string __Chat__GroupServerManager_ids[2] =
{
    "::Chat::GroupServerManager",
    "::Ice::Object"
};

}

bool
Chat::GroupServerManager::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Chat__GroupServerManager_ids, __Chat__GroupServerManager_ids + 2, _s);
}

::std::vector< ::std::string>
Chat::GroupServerManager::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Chat__GroupServerManager_ids[0], &__Chat__GroupServerManager_ids[2]);
}

const ::std::string&
Chat::GroupServerManager::ice_id(const ::Ice::Current&) const
{
    return __Chat__GroupServerManager_ids[0];
}

const ::std::string&
Chat::GroupServerManager::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::GroupServerManager";
    return typeId;
#else
    return __Chat__GroupServerManager_ids[0];
#endif
}

::Ice::DispatchStatus
Chat::GroupServerManager::___CreateGroup(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    __is->read(__p_name);
    __inS.endReadParams();
    try
    {
        ::Chat::GroupServerPrx __ret = CreateGroup(__p_name, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Chat::NameAlreadyExists& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Chat::GroupServerManager::___ListGroups(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Chat::Groups __ret = ListGroups(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Chat::GroupServerManager::___DeleteGroup(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    __is->read(__p_name);
    __inS.endReadParams();
    try
    {
        DeleteGroup(__p_name, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Chat::NameDoesNotExist& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Chat::GroupServerManager::___getGroupServerByName(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    __is->read(__p_name);
    __inS.endReadParams();
    ::Chat::GroupServerPrx __ret = getGroupServerByName(__p_name, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Chat__GroupServerManager_all[] =
{
    "CreateGroup",
    "DeleteGroup",
    "ListGroups",
    "getGroupServerByName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Chat::GroupServerManager::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Chat__GroupServerManager_all, __Chat__GroupServerManager_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Chat__GroupServerManager_all)
    {
        case 0:
        {
            return ___CreateGroup(in, current);
        }
        case 1:
        {
            return ___DeleteGroup(in, current);
        }
        case 2:
        {
            return ___ListGroups(in, current);
        }
        case 3:
        {
            return ___getGroupServerByName(in, current);
        }
        case 4:
        {
            return ___ice_id(in, current);
        }
        case 5:
        {
            return ___ice_ids(in, current);
        }
        case 6:
        {
            return ___ice_isA(in, current);
        }
        case 7:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Chat::GroupServerManager::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Chat::GroupServerManager::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Chat::__patch(GroupServerManagerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Chat::GroupServerManagerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Chat::GroupServerManager::ice_staticId(), v);
    }
}

::Ice::Object* Chat::upCast(::Chat::User* p) { return p; }

namespace
{
const ::std::string __Chat__User_ids[2] =
{
    "::Chat::User",
    "::Ice::Object"
};

}

bool
Chat::User::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Chat__User_ids, __Chat__User_ids + 2, _s);
}

::std::vector< ::std::string>
Chat::User::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Chat__User_ids[0], &__Chat__User_ids[2]);
}

const ::std::string&
Chat::User::ice_id(const ::Ice::Current&) const
{
    return __Chat__User_ids[0];
}

const ::std::string&
Chat::User::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::User";
    return typeId;
#else
    return __Chat__User_ids[0];
#endif
}

::Ice::DispatchStatus
Chat::User::___getName(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::std::string __ret = getName(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Chat::User::___receiveText(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_msg;
    ::Chat::UserPrx __p_sender;
    ::Chat::GroupServerPrx __p_gServer;
    __is->read(__p_msg);
    __is->read(__p_sender);
    __is->read(__p_gServer);
    __inS.endReadParams();
    receiveText(__p_msg, __p_sender, __p_gServer, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Chat::User::___receivePrivateText(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_msg;
    ::Chat::UserPrx __p_sender;
    __is->read(__p_msg);
    __is->read(__p_sender);
    __inS.endReadParams();
    receivePrivateText(__p_msg, __p_sender, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Chat__User_all[] =
{
    "getName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "receivePrivateText",
    "receiveText"
};

}

::Ice::DispatchStatus
Chat::User::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Chat__User_all, __Chat__User_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Chat__User_all)
    {
        case 0:
        {
            return ___getName(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___receivePrivateText(in, current);
        }
        case 6:
        {
            return ___receiveText(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Chat::User::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Chat::User::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Chat::__patch(UserPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Chat::UserPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Chat::User::ice_staticId(), v);
    }
}
